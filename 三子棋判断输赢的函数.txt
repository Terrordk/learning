char ISwin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < col; i++)   //判断三行
	{
		int j = 0;
		for (j = 0; j < row-2; j++)
		{
			if (board[j][i] == board[j+1][i] && board[j+1][i] == board[j+2][i] && board[j+2][i] != ' ')
				return board[j][i];
		}
	}

	for (i = 0; i < row; i++)   //判断三列
	{
		int j = 0;
		for (j = 0; j < col - 2; j++)
		{
			if (board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2] != ' ')
				return board[j][i];
		}
	}

	//判断对角线
	//左对角线
	for (i = 0; i < col-2 && i < row-2; i++)
	{
		if (board[i][i] == board[i+1][i+1] && board[i+1][i+1] == board[i+2][i+2] && board[i+2][i+2] != ' ')
		{
			return board[i][i];
		}
	}
	//右对角线
	for (i = row-1; i-2 >= 0; i--)
	{
		int j = 0;
		for (j = 0; j+2 < col; j++)
		{
			if (board[i][j] == board[i-1][j+1] && board[i-1][j+1] == board[i-2][j+2] && board[i-2][j+2] != ' ')
			{
				return board[i][j];
			}
		}
	}

	//判断平局
	//如果棋盘满了，返回1，不满返回0;
	int ret = IsFull(board, row, col);
	if (ret == 1)
	{
		return 'Q';
	}

	return 'c';
}